<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ReactorWinUI.ScaffoldApp Version: <#= Assembly.GetExecutingAssembly().GetName().Version #>
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Collections;
using System.IO;
using System.Reflection;


using Microsoft.UI.Xaml;
using Microsoft.UI.Xaml.Controls;
using Microsoft.UI.Xaml.Media;
using Microsoft.UI.Xaml.Controls.Primitives;
using Microsoft.UI.Xaml.Input;

using Microsoft.UI.Xaml.Media.Animation;
using Microsoft.UI.Xaml.Media.Media3D;

using Windows.UI.Text;
using Windows.Foundation;

using ReactorWinUI.Internals;

namespace ReactorWinUI
{
    public partial interface IRx<#= TypeName #> : I<#= BaseTypeName #>
    {
    <# foreach (var property in Properties) { #>
        PropertyValue<<#= property.PropertyType.Name.ToResevedWordTypeName() #>> <#= property.Name #> { get; set; }
    <# } #>

    <# foreach (var ev in Events) { #>
        Action <#= ev.Name #>Action { get; set; }
        Action<object, <#= ev.EventHandlerType.GetMethod("Invoke").GetParameters()[1].ParameterType.Name #>> <#= ev.Name #>ActionWithArgs { get; set; }
    <# } #>
    }
    
    <# if (!IsSealed) { #>
    public partial class Rx<#= TypeName #><T> : <#= BaseTypeName #><T>, IRx<#= TypeName #> where T : <#= TypeName #>, new()
    {
        public Rx<#= TypeName #>()
        { 
        
        }

        public Rx<#= TypeName #>(Action<T> componentRefAction)
            : base(componentRefAction)
        {

        }
    <# } else { #>
    public partial class Rx<#= TypeName #> : <#= BaseTypeName #><<#= TypeName #>>, IRx<#= TypeName #>
    {
        public Rx<#= TypeName #>()
        { 
        
        }

        public Rx<#= TypeName #>(Action<<#= TypeName #>> componentRefAction)
            : base(componentRefAction)
        {

        }
    <# } #>
        <# foreach (var property in Properties) { #>
        PropertyValue<<#= property.PropertyType.Name.ToResevedWordTypeName() #>> IRx<#= TypeName #>.<#= property.Name #> { get; set; }
        <# } #>

        <# foreach (var ev in Events) { #>
        Action IRx<#= TypeName #>.<#= ev.Name #>Action { get; set; }
        Action<object, <#= ev.EventHandlerType.GetMethod("Invoke").GetParameters()[1].ParameterType.Name #>> IRx<#= TypeName #>.<#= ev.Name #>ActionWithArgs { get; set; }
        <# } #>

        protected override void OnUpdate()
        {
            OnBeginUpdate();

            var thisAsIRx<#= TypeName #> = (IRx<#= TypeName #>)this;
            <# foreach (var property in Properties) { #>
            SetPropertyValue(NativeControl, <#= TypeName #>.<#= property.Name #>Property, thisAsIRx<#= TypeName #>.<#= property.Name #>);
            <# } #>

            base.OnUpdate();

            OnEndUpdate();
        }

        partial void OnBeginUpdate();
        partial void OnEndUpdate();

        protected override void OnAttachNativeEvents()
        {
            OnBeginAttachNativeEvents();

            var thisAsIRx<#= TypeName #> = (IRx<#= TypeName #>)this;
            <# foreach (var ev in Events) { #>
            if (thisAsIRx<#= TypeName #>.<#= ev.Name #>Action != null || thisAsIRx<#= TypeName #>.<#= ev.Name #>ActionWithArgs != null)
            {
                NativeControl.<#= ev.Name #> += NativeControl_<#= ev.Name #>;
            }
            <# } #>

            base.OnAttachNativeEvents();

            OnEndAttachNativeEvents();
        }

        <# foreach (var ev in Events) { #>
        private void NativeControl_<#= ev.Name #>(object sender, <#= GetEventArgsTypeName(ev) #> e)
        {
            var thisAsIRx<#= TypeName #> = (IRx<#= TypeName #>)this;
            thisAsIRx<#= TypeName #>.<#= ev.Name #>Action?.Invoke();
            thisAsIRx<#= TypeName #>.<#= ev.Name #>ActionWithArgs?.Invoke(sender, e);
        }
        <# } #>

        protected override void OnDetachNativeEvents()
        {
            OnBeginDetachNativeEvents();

            if (NativeControl != null)
            {
            <# foreach (var ev in Events) { #>
            NativeControl.<#= ev.Name #> -= NativeControl_<#= ev.Name #>;
            <# } #>
            }

            base.OnDetachNativeEvents();

            OnEndDetachNativeEvents();
        }

        partial void OnBeginAttachNativeEvents();
        partial void OnEndAttachNativeEvents();
        partial void OnBeginDetachNativeEvents();
        partial void OnEndDetachNativeEvents();
    }
    <# if (IsTypeNotAbstractNotSealedWithEmptyConstructor) { #>
    public partial class Rx<#= TypeName #> : Rx<#= TypeName #><<#= TypeName #>>
    {
        public Rx<#= TypeName #>()
        { 
        
        }

        public Rx<#= TypeName #>(Action<<#= TypeName #>> componentRefAction)
            : base(componentRefAction)
        {

        }
    }
    <# } #>
    public static partial class Rx<#= TypeName #>Extensions
    {
        <# foreach (var property in Properties) { #>
        public static T <#= property.Name #><T>(this T <#= TypeName.ToLowerInvariant() #>, <#= property.PropertyType.Name.ToResevedWordTypeName() #> <#= property.Name.CamelCase() #>) where T : IRx<#= TypeName #>
        {
            <#= TypeName.ToLowerInvariant() #>.<#= property.Name #> = new PropertyValue<<#= property.PropertyType.Name.ToResevedWordTypeName() #>>(<#= property.Name.CamelCase() #>);
            return <#= TypeName.ToLowerInvariant() #>;
        }
        public static T <#= property.Name #><T>(this T <#= TypeName.ToLowerInvariant() #>, Func<<#= property.PropertyType.Name.ToResevedWordTypeName() #>> <#= property.Name.CamelCase() #>Func) where T : IRx<#= TypeName #>
        {
            <#= TypeName.ToLowerInvariant() #>.<#= property.Name #> = new PropertyValue<<#= property.PropertyType.Name.ToResevedWordTypeName() #>>(<#= property.Name.CamelCase() #>Func);
            return <#= TypeName.ToLowerInvariant() #>;
        }
        <# if (property.PropertyType.Name == "Thickness") { #>
        public static T <#= property.Name #><T>(this T <#= TypeName.ToLowerInvariant() #>, double leftRight, double topBottom) where T : IRx<#= TypeName #>
        {
            <#= TypeName.ToLowerInvariant() #>.<#= property.Name #> = new PropertyValue<<#= property.PropertyType.Name.ToResevedWordTypeName() #>>(new Thickness(leftRight, topBottom, leftRight, topBottom));
            return <#= TypeName.ToLowerInvariant() #>;
        }
        public static T <#= property.Name #><T>(this T <#= TypeName.ToLowerInvariant() #>, double uniformSize) where T : IRx<#= TypeName #>
        {
            <#= TypeName.ToLowerInvariant() #>.<#= property.Name #> = new PropertyValue<<#= property.PropertyType.Name.ToResevedWordTypeName() #>>(new Thickness(uniformSize));
            return <#= TypeName.ToLowerInvariant() #>;
        }
        <# } #>
        <# if (property.PropertyType.Name == "ImageSource") { 
            var propertyName = property.Name.Length <= 6 ? property.Name : property.Name.Substring(0, property.Name.Length - 6); #>
        public static T <#= propertyName #><T>(this T <#= TypeName.ToLowerInvariant() #>, string file) where T : IRx<#= TypeName #>
        {
            <#= TypeName.ToLowerInvariant() #>.<#= property.Name #> = new PropertyValue<<#= property.PropertyType.Name.ToResevedWordTypeName() #>>(new BitmapImage(new Uri(file)));
            return <#= TypeName.ToLowerInvariant() #>;
        }
        /*
        public static T <#= propertyName #><T>(this T <#= TypeName.ToLowerInvariant() #>, string resourceName, Assembly sourceAssembly) where T : IRx<#= TypeName #>
        {
            <#= TypeName.ToLowerInvariant() #>.<#= property.Name #> = new PropertyValue<<#= property.PropertyType.Name.ToResevedWordTypeName() #>>(ImageSource.FromResource(resourceName, sourceAssembly));
            return <#= TypeName.ToLowerInvariant() #>;
        }
        */
        public static T <#= propertyName #><T>(this T <#= TypeName.ToLowerInvariant() #>, Uri imageUri) where T : IRx<#= TypeName #>
        {
            <#= TypeName.ToLowerInvariant() #>.<#= property.Name #> = new PropertyValue<<#= property.PropertyType.Name.ToResevedWordTypeName() #>>(new BitmapImage(imageUri));
            return <#= TypeName.ToLowerInvariant() #>;
        }
        /*
        public static T <#= propertyName #><T>(this T <#= TypeName.ToLowerInvariant() #>, Uri imageUri, bool cachingEnabled, TimeSpan cacheValidity) where T : IRx<#= TypeName #>
        {
            <#= TypeName.ToLowerInvariant() #>.<#= property.Name #> = new PropertyValue<<#= property.PropertyType.Name.ToResevedWordTypeName() #>>(new UriImageSource
            {
                Uri = imageUri,
                CachingEnabled = cachingEnabled,
                CacheValidity = cacheValidity
            });
            return <#= TypeName.ToLowerInvariant() #>;
        }
        public static T <#= propertyName #><T>(this T <#= TypeName.ToLowerInvariant() #>, Func<Stream> imageStream) where T : IRx<#= TypeName #>
        {
            <#= TypeName.ToLowerInvariant() #>.<#= property.Name #> = new PropertyValue<<#= property.PropertyType.Name.ToResevedWordTypeName() #>>(ImageSource.FromStream(imageStream));
            return <#= TypeName.ToLowerInvariant() #>;
        }
        */
        <# } #>
        <# } #>
        <# foreach (var ev in Events) { #>
        public static T On<#= ev.Name #><T>(this T <#= TypeName.ToLowerInvariant() #>, Action <#= ev.Name.ToLowerInvariant() #>Action) where T : IRx<#= TypeName #>
        {
            <#= TypeName.ToLowerInvariant() #>.<#= ev.Name #>Action = <#= ev.Name.ToLowerInvariant() #>Action;
            return <#= TypeName.ToLowerInvariant() #>;
        }

        public static T On<#= ev.Name #><T>(this T <#= TypeName.ToLowerInvariant() #>, Action<object, <#= GetEventArgsTypeName(ev) #>> <#= ev.Name.ToLowerInvariant() #>ActionWithArgs) where T : IRx<#= TypeName #>
        {
            <#= TypeName.ToLowerInvariant() #>.<#= ev.Name #>ActionWithArgs = <#= ev.Name.ToLowerInvariant() #>ActionWithArgs;
            return <#= TypeName.ToLowerInvariant() #>;
        }
        <# } #>
    }
}
